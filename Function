using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Net.Http;
using Newtonsoft.Json;
using Amazon.Lambda.APIGatewayEvents;
using Amazon.DynamoDBv2;
using Amazon.DynamoDBv2.Model;

using Amazon.Lambda.Core;
using System.Dynamic;

// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]

namespace FinalAssign
{
    [Serializable]
    public class Quote
    {
        public string id;
        public string quote;
    }

    public class Function
    {
        public static readonly HttpClient client = new HttpClient();
        private static AmazonDynamoDBClient databaseClient = new AmazonDynamoDBClient();
        //define what table name trying to access
        private string tableName = "KanyeQuote";

        public async Task<ExpandoObject> FunctionHandler(APIGatewayProxyRequest input, ILambdaContext context)
        {
            //create dictionary 
            Dictionary<string, string> myDict = (Dictionary<string, string>)input.QueryStringParameters;

            //create string to hold url and the api keys will pull the json 
            string myURL = await client.GetStringAsync("https://api.kanye.rest/");
            //store deserialized object
            dynamic myObjects = JsonConvert.DeserializeObject<ExpandoObject>(myURL);
            
            Quote myQuote = new Quote()
            {
                quote = myObjects.quote,
            };
            //create a dictionary to add to database
            Dictionary<string, AttributeValue> myDictonary = new Dictionary<string, AttributeValue>();
            //add the items to the dictonary 
             myDictonary.Add("quote", new AttributeValue() { S = myQuote.quote });
            myDictonary.Add("id", new AttributeValue() { S = myDict.First().Value });
            //put items in the database
            PutItemRequest myRequest = new PutItemRequest(tableName, myDictonary);
            PutItemResponse res = await databaseClient.PutItemAsync(myRequest);

            return myObjects;
        }
    }
}
